/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tools

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.tasks.TaskExecutionException
import java.io.File


/**
 * A simple 'hello world' plugin.
 */
enum class Mode{
    development, production, local
}

class SoftPosToolsExtension(private val project:Project) {
    var mode:Mode = Mode.production
    var type:String = "release"
    var dependency:String? = null
    private var partnerName:String? = null

    val currentTask:Task get() = project.tasks.getByName("edfapay")

    fun install(partnerCode:String){
        println("Installing edfapay sdk with parameters: mode:$mode | type:$type | partnerCode:$partnerCode")

        partnerName = Helper.hexToPartnerCode(partnerCode) ?: throw TaskExecutionException(currentTask, Errors.invalidPartnerCodeToInstall)
        if(!partnerName!!.startsWith("partner~")){
            throw TaskExecutionException(currentTask, Errors.invalidPartnerCodeToInstall)
        }

        when(dependency == null) {
            true -> {
                dependency = when (this.mode) {
                    Mode.local -> "com.edfapay:card-sdk:1.0.1"
                    else -> "com.github.edfapay:android-edfapay-softpos-sdk:$mode-SNAPSHOT"
                }
            }
            false -> {
                println("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")
                println("Dependency override: $dependency")
                println(" - `Mode` and `Partner` cannot be considered to create `dependency`")
            }
        }
        println("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")
        println("Partner:       ︳ $partnerName")
        println("Mode:          ︳ ${this.mode}")
        println("Type:          ︳ ${this.type}")
        println("Dependency:    ︳ $dependency")
        println("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")

        dependency?.let {
            project.dependencies.add("implementEdfapay", it)
            project.dependencies.add("implementation", it)
        } ?: throw TaskExecutionException(currentTask, Errors.dependencyIsNull)

        configurePartner()
    }

    private fun configurePartner(){
        project.afterEvaluate {
            project.configurations.getByName("implementEdfapay").resolve().forEach { aarFile ->
                val depsAarName = "card-sdk-$mode-SNAPSHOT.aar"

                if (aarFile.name.endsWith(depsAarName)) {
//                    println("->> ${aarFile.absolutePath}")

                    // Define a temporary directory to extract the AAR contents
                    val fname = aarFile.name.replace(".aar", "")
                    val modifedFolder = File(aarFile.parentFile.absolutePath + "/$fname")
                    modifedFolder.mkdir()

                    // Extract the contents of the AAR aarFile

                    project.copy {
                        it.from(project.zipTree(aarFile))
                        it.into(modifedFolder)
                    }

                    // Move assets to root from partner~assets directory

                    val partnerAssets = File(modifedFolder, "assets/$partnerName")
                    project.copy {
                        it.from(project.fileTree(partnerAssets))
                        it.into(partnerAssets.parentFile)
                    }

                    // Remove partner assets directories
                    if(partnerAssets.parentFile.listFiles()?.isNotEmpty() == true){
                        partnerAssets.parentFile.listFiles()?.toList()?.forEach {
                            if(it.name.startsWith("partner~")){
                                println("File Delete ${it.deleteRecursively()}: ${it.absolutePath}")
                            }
                        }
                    }
                    Helper.zipFolder(modifedFolder.toPath(), aarFile.toPath())
                }
            }
        }
    }
}

class SoftPosTools: Plugin<Project> {
    override fun apply(project: Project) {
        project.tasks.register("edfapay") { task ->
            task.extensions.add("softpos", SoftPosToolsExtension(project))
            project.configurations.create("implementEdfapay"){
                it.isCanBeResolved = true
            }
        }
    }
}
