/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tools

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.tasks.TaskExecutionException
import java.io.File


/**
 * A simple 'hello world' plugin.
 */

class SoftPosToolsExtension(private val project:Project) {
    var partnerCode:String? = null
    var version:String? = null
    var mode:String? = null
    var dependency:String? = null
    private var partnerName:String? = null

    val currentTask:Task get() = project.tasks.getByName("edfapay")

    fun install(partnerCode:String?){
        val partnerCode_ = lookForPartnerCode(partnerCode ?: this.partnerCode) ?: throw TaskExecutionException(currentTask, Errors.invalidPartnerCodeToInstall)
        val mode = lookForSdkMode(mode)
        val version = lookForSdkVersion(version)

        this.partnerName = Helper.hexToPartnerCode(partnerCode_) ?: throw TaskExecutionException(currentTask, Errors.invalidPartnerCodeToInstall)
        if(!partnerName!!.startsWith("partner~")){
            throw TaskExecutionException(currentTask, Errors.invalidPartnerCodeToInstall)
        }

        partnerName = partnerName?.replace("partner~", "")

        when(dependency == null) {
            true -> {
                val depStr = "com.github.edfapay.android-edfapay-softpos-sdk"
                version?.let {
                    println("Skipping `mode` as `version` number exists...")
                    println("Installing edfapay sdk with parameters: version:$it | partnerCode:$partnerCode_")
                    dependency = "$depStr:$partnerName:$it"
                } ?: mode?.let {
                    println("Installing edfapay sdk with parameters: mode:$it | partnerCode:$partnerCode_")
                    dependency = "$depStr:$partnerName:$it-SNAPSHOT"
                } ?: throw TaskExecutionException(currentTask, Errors.invalidSdkVersionOrModeToInstall)

            }
            false -> {
                println("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")
                println("Dependency override: $dependency")
                println(" - `Mode/Version` and `Partner Code` cannot be considered to create `dependency`")
            }
        }
        println("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")
        println("Partner:       ︳ $partnerName")
        println("Mode:          ︳ ${mode ?: "Skipped"}")
        println("SDK:           ︳ $dependency")
        println("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")

        dependency?.let {
//            project.dependencies.add("implementEdfapay", it)
            project.dependencies.add("implementation", it)
        } ?: throw TaskExecutionException(currentTask, Errors.dependencyIsNull)

    }

    private fun lookForPartnerCode(partnerCode:String?) : String?{
        return (project.findProperty("EDFAPAY_PARTNER"))?.let {
            println("Partner Code Found at Global or Project Gradle Properties '~/.gradle/gradle.properties | ./gradle.properties'")
            it as String?
        } ?: System.getenv().get("EDFAPAY_PARTNER")?.let {
            println("Partner Code Found at Environment Variable")
            it
        } ?: partnerCode?.let {
            println("Partner Code passed by Gradle Script to edfapay.softpos.install() or edfapay.softpos.partnerCode")
            it
        }
    }

    private fun lookForSdkMode(mode:String?) : String?{
        return (project.findProperty("EDFAPAY_SDK_MODE"))?.let {
            println("SDK Mode Found at Global or Project Gradle Properties '~/.gradle/gradle.properties | ./gradle.properties'")
            it as String?
        } ?: System.getenv().get("EDFAPAY_SDK_MODE")?.let {
            println("SDK Mode Found at Environment Variable")
            it
        } ?: mode?.let {
            println("SDK Mode passed by Gradle Script to edfapay.softpos.mode")
            it
        }
    }

    private fun lookForSdkVersion(version:String?) : String?{
        return (project.findProperty("EDFAPAY_SDK_VERSION"))?.let {
            project.gradle.gradleHomeDir?.absolutePath
            println("SDK Version Found at Global or Project Gradle Properties '~/.gradle/gradle.properties | ./gradle.properties'")
            it as String?
        } ?: System.getenv().get("EDFAPAY_SDK_VERSION")?.let {
            println("SDK Version Found at Environment Variable")
            it
        } ?: version?.let {
            println("SDK Version passed by Gradle Script to edfapay.softpos.version")
            it
        }
    }

    private fun configurePartner(){
        project.afterEvaluate {
            project.configurations.getByName("implementEdfapay").resolve().forEach { aarFile ->
                val depsAarName = "card-sdk-$mode-SNAPSHOT.aar"

                if (aarFile.name.endsWith(depsAarName)) {
//                    println("->> ${aarFile.absolutePath}")

                    // Define a temporary directory to extract the AAR contents
                    val fname = aarFile.name.replace(".aar", "")
                    val modifedFolder = File(aarFile.parentFile.absolutePath + "/$fname")
                    modifedFolder.mkdir()

                    // Extract the contents of the AAR aarFile

                    project.copy {
                        it.from(project.zipTree(aarFile))
                        it.into(modifedFolder)
                    }

                    // Move assets to root from partner~assets directory

                    val partnerAssets = File(modifedFolder, "assets/$partnerName")
                    project.copy {
                        it.from(project.fileTree(partnerAssets))
                        it.into(partnerAssets.parentFile)
                    }

                    // Remove partner assets directories
                    if(partnerAssets.parentFile.listFiles()?.isNotEmpty() == true){
                        partnerAssets.parentFile.listFiles()?.toList()?.forEach {
                            if(it.name.startsWith("partner~")){
                                println("File Delete ${it.deleteRecursively()}: ${it.absolutePath}")
                            }
                        }
                    }
                    Helper.zipFolder(modifedFolder.toPath(), aarFile.toPath())
                }
            }
        }
    }
}

class SoftPosTools: Plugin<Project> {
    override fun apply(project: Project) {
        project.tasks.register("edfapay") { task ->
            task.extensions.add("softpos", SoftPosToolsExtension(project))
//            project.configurations.create("implementEdfapay"){
//                it.isCanBeResolved = true
//            }
        }
    }
}
